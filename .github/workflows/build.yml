name: Build

on: [push]

jobs:
  build-mac:

    runs-on: macos-latest
#    strategy:
#      matrix:
#        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    env:
      PYTHON: '/Library/Frameworks/Python.framework/Versions/3.7/bin/python3.7'

    steps:
    - uses: actions/checkout@v2
    - name: Install Python 3.7 macOS pkg
      run: |
        /usr/bin/curl https://www.python.org/ftp/python/3.7.6/python-3.7.6-macosx10.9.pkg -o /tmp/python-3.7.6-macosx10.9.pkg
        sudo /usr/sbin/installer -pkg /tmp/python-3.7.6-macosx10.9.pkg -target /
        /Applications/Python\ 3.7/Install\ Certificates.command
    - name: Install dependencies
      run: |
        ${PYTHON} -m pip install --upgrade pip
        ${PYTHON} -m pip install -r requirements.txt
    - name: Run build script
      run: |
        export PROJECT_PATH=$GITHUB_WORKSPACE
        /usr/bin/make build-macos
    - name: Package macOS App
      run: |
        cd ./dist
        /usr/bin/zip --symlinks -r HDFM.zip HDFM.app
    - name: Upload macOS App
      uses: actions/upload-artifact@v1
      with:
        name: HDFM.zip
        path: ./dist/HDFM.zip
  build-windows:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Run build script
        env:
          PYTHON: python
        shell: cmd
        run: |
          build_scripts\build_windows.bat
      - name: Upload Windows Executable
        uses: actions/upload-artifact@v1
        with:
          name: HDFM.exe
          path: ./dist/HDFM.exe
  build-ubuntu:

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
      - name: Create container
        run: |
          HOME=`realpath .`
          docker run --name hdfm_builder -v $HOME:/src -d ubuntu:19.10 sleep infinity
      - name: Set up Environment
        run: |
          docker exec -i -w /src hdfm_builder bash -c "\
            ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime \
            ; apt-get update \
            ; apt-get install -y python3 python3-dev python3-venv virtualenv python3-tk tk8.6-dev tcl8.6-dev"
      - name: Run build script
        run: |
          docker exec -i -w /src hdfm_builder bash build_scripts/build_ubuntu.sh
      - name: Upload Ubuntu Executable
        uses: actions/upload-artifact@v1
        with:
          name: HDFM
          path: ./dist/hdfm

  build-arm:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch:
          - armv7
          - aarch64

    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v1.0.6
        with:
          architecture: ${{ matrix.arch }}
          distribution: ubuntu18.04
          run: |
            export DEBIAN_FRONTEND=noninteractive
            apt-get update
            apt-get install -y python3.7 python3.7-dev python3.7-venv virtualenv python3-tk tk8.6-dev tcl8.6-dev libjpeg-dev zlib1g-dev
            build_scripts/build_ubuntu.sh
      - run: |
          ls -la ~/
          ls -la ~/.cache
          ls -la ~/.cache/pip
      - name: Cache PIP requirements
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.arch }}
#      - run: |
#          HOME=`realpath .`
#          docker run -v $HOME:/src --rm --privileged multiarch/qemu-user-static:register --reset
#
#      - uses: docker://multiarch/ubuntu-core:armhf-bionic
#        with:
#          args: >
#            bash -c
#            "apt-get update
#            && DEBIAN_FRONTEND=noninteractive apt-get install -y python3.7 python3.7-dev python3.7-venv virtualenv python3-tk tk8.6-dev tcl8.6-dev libjpeg-dev zlib1g-dev
#            && build_scripts/build_ubuntu.sh"
      - name: Upload Ubuntu ${{ matrix.arch }} Executable
        uses: actions/upload-artifact@v1
        with:
          name: HDFM ${{ matrix.arch }}
          path: ./dist/hdfm
